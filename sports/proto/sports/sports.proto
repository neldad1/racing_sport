syntax = "proto3";
package sports;

option go_package = "/sports";

import "google/protobuf/timestamp.proto";

service Sports {
  // ListEvents will return a collection of all sports events.
  rpc ListEvents(ListEventsRequest) returns (ListEventsResponse) {}
}

/* Requests/Responses */

// Request for ListEvents call. 
message ListEventsRequest {
  ListEventsRequestFilter filter = 1;
}

// Response for ListEvents call. 
message ListEventsResponse {
  repeated Event events = 1;
}

// Request for ListEvents call. 
message ListEventsRequestFilter {
  optional int64 sportId = 1;
  string status = 2;
}

/* Resources */

// An enum for the status of an event.
enum EventStatus {
  CLOSED = 0;
  OPEN = 1;
  ONGOING = 2;
}

// A sport event resource.
message Event {
  // ID represents a unique identifier for the event.
  int64 id = 1;
  // Name is the official name given to the event.
  string name = 2;
  // VenueId represents a unique identifier for the venue.
  int64 venue_id = 3;
  // SportsId represents a unique identifier for the type of sport.
  int64 sport_id = 4;
  // ParticipantsId represents a unique identifier for the participants of the event.
  int64 participants_id = 5;
  // AdvertisedStartTime is the time the event is advertised to run.
  google.protobuf.Timestamp advertised_start_time = 6;
  // AdvertisedEndTime is the time the event is advertised to end.
  google.protobuf.Timestamp advertised_end_time = 7;
  // Status represents whether the event is still open, ongoing or closed.
  EventStatus status = 8;
}